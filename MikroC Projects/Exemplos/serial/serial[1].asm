;  ASM code generated by mikroVirtualMachine for PIC - V. 8.1.0.0
;  Date/Time: 29/05/2010 12:08:48
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0047	$	_Usart_Data_Ready:
$0047	$3000			MOVLW	0
$0048	$1303			BCF	STATUS, RP1
$0049	$1283			BCF	STATUS, RP0
$004A	$1A8C			BTFSC	PIR1, 5
$004B	$3001			MOVLW	1
$004C	$00F1			MOVWF	STACK_1
$004D	$0871			MOVF	STACK_1, 0
$004E	$00F0			MOVWF	STACK_0
$004F	$0008			RETURN
$003C	$	_Usart_Read:
$003C	$1303			BCF	STATUS, RP1
$003D	$1283			BCF	STATUS, RP0
$003E	$081A			MOVF	RCREG, 0
$003F	$00A0			MOVWF	Usart_Read_tmp_L0
$0040	$1C98			BTFSS	RCSTA, 1
$0041	$2844			GOTO	L_Usart_Read_2
$0042	$1218			BCF	RCSTA, 4
$0043	$1618			BSF	RCSTA, 4
$0044	$	L_Usart_Read_2:
$0044	$0820			MOVF	Usart_Read_tmp_L0, 0
$0045	$00F0			MOVWF	STACK_0
$0046	$0008			RETURN
$001C	$	_Usart_Write:
$001C	$	L_Usart_Write_3:
$001C	$3000			MOVLW	0
$001D	$1303			BCF	STATUS, RP1
$001E	$1683			BSF	STATUS, RP0
$001F	$1898			BTFSC	TXSTA, 1
$0020	$3001			MOVLW	1
$0021	$00F1			MOVWF	STACK_1
$0022	$0871			MOVF	STACK_1, 0
$0023	$3A00			XORLW	0
$0024	$1D03			BTFSS	STATUS, Z
$0025	$2828			GOTO	L_Usart_Write_4
$0026	$0000			NOP
$0027	$281C			GOTO	L_Usart_Write_3
$0028	$	L_Usart_Write_4:
$0028	$1283			BCF	STATUS, RP0
$0029	$0820			MOVF	FARG_Usart_Write+0, 0
$002A	$0099			MOVWF	TXREG
$002B	$0008			RETURN
$002C	$	_Usart_Init:
$002C	$1303			BCF	STATUS, RP1
$002D	$1683			BSF	STATUS, RP0
$002E	$1698			BSF	TXSTA, 5
$002F	$3090			MOVLW	144
$0030	$1283			BCF	STATUS, RP0
$0031	$0098			MOVWF	RCSTA
$0032	$1683			BSF	STATUS, RP0
$0033	$1787			BSF	TRISC, 7
$0034	$1307			BCF	TRISC, 6
$0035	$	L_Usart_Init_0:
$0035	$1283			BCF	STATUS, RP0
$0036	$1E8C			BTFSS	PIR1, 5
$0037	$283B			GOTO	L_Usart_Init_1
$0038	$081A			MOVF	RCREG, 0
$0039	$00A4			MOVWF	Usart_Init_tmp_L0
$003A	$2835			GOTO	L_Usart_Init_0
$003B	$	L_Usart_Init_1:
$003B	$0008			RETURN
$0004	$	_main:
;serial.c,12 :: 		void main(void)
;serial.c,15 :: 		TRISA = 0x00;
$0004	$1303			BCF	STATUS, RP1
$0005	$1683			BSF	STATUS, RP0
$0006	$0185			CLRF	TRISA, 1
;serial.c,16 :: 		TRISB = 0x00;
$0007	$0186			CLRF	TRISB, 1
;serial.c,17 :: 		TRISC = 0x80;
$0008	$3080			MOVLW	128
$0009	$0087			MOVWF	TRISC
;serial.c,18 :: 		TRISD = 0x00;
$000A	$0188			CLRF	TRISD, 1
;serial.c,19 :: 		TRISE = 0x00;
$000B	$0189			CLRF	TRISE, 1
;serial.c,20 :: 		ADCON1= 0x07;		 //entradas digitais
$000C	$3007			MOVLW	7
$000D	$009F			MOVWF	ADCON1
;serial.c,22 :: 		usart_init(9600);   //escolhendo o baudrate
$000E	$3081			MOVLW	129
$000F	$0099			MOVWF	SPBRG
$0010	$1518			BSF	TXSTA, BRGH
$0011	$202C			CALL	_Usart_Init
;serial.c,24 :: 		while(true)
$0012	$	L_main_0:
;serial.c,26 :: 		if(usart_data_ready())
$0012	$2047			CALL	_Usart_Data_Ready
$0013	$0870			MOVF	STACK_0, 0
$0014	$1903			BTFSC	STATUS, Z
$0015	$281A			GOTO	L_main_2
;serial.c,28 :: 		recebe = usart_read();
$0016	$203C			CALL	_Usart_Read
;serial.c,29 :: 		usart_write(recebe);
$0017	$0870			MOVF	STACK_0, 0
$0018	$00A0			MOVWF	FARG_Usart_Write+0
$0019	$201C			CALL	_Usart_Write
;serial.c,30 :: 		}
$001A	$	L_main_2:
;serial.c,31 :: 		}
$001A	$2812			GOTO	L_main_0
;serial.c,32 :: 		}
$001B	$281B			GOTO	$
